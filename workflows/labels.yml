name: Issue and PR Labeler

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited]
  
jobs:
  label-issues:
    name: Label Issues and PRs
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    
    steps:
      - name: Label based on title and body content
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const payload = context.payload;
            const isIssue = !!payload.issue;
            const isPR = !!payload.pull_request;
            
            if (!isIssue && !isPR) return;
            
            // Get the issue or PR object
            const item = isIssue ? payload.issue : payload.pull_request;
            const title = item.title.toLowerCase();
            const body = (item.body || '').toLowerCase();
            
            // Define label mapping for both languages
            const labelMap = {
              // General
              'bug': ['bug', 'chyba', 'fix', 'oprava', 'error', 'failed', 'failure', 'selhalo'],
              'enhancement': ['feature', 'enhancement', 'vylepšení', 'nová funkce', 'new feature', 'enhancement', 'improvement'],
              'documentation': ['doc', 'docs', 'dokumentace', 'documentation', 'readme', 'wiki'],
              'question': ['question', 'otázka', 'help', 'pomoc', '?'],
              'good first issue': ['beginner', 'začátečník', 'good first issue', 'easy', 'jednoduchý', 'simple'],
              'security': ['security', 'bezpečnost', 'zabezpečení', 'vulnerability', 'zranitelnost', 'cve'],
              
              // Bitcoin/Crypto specific
              'wallet': ['wallet', 'peněženka', 'key management', 'správa klíčů'],
              'cryptography': ['cryptography', 'kryptografie', 'crypto', 'encryption', 'šifrování'],
              'blockchain': ['blockchain', 'block', 'blok', 'chain', 'řetězec'],
              'transaction': ['transaction', 'transakce', 'tx', 'payment', 'platba'],
              'node': ['node', 'uzel', 'full node', 'plný uzel', 'lightning'],
              
              // Languages
              'cs': ['czech', 'čeština', 'česky', 'cz'],
              'en': ['english', 'angličtina', 'anglicky', 'en']
            };
            
            // Prepare the labels to add
            const labelsToAdd = [];
            
            // Check title and body against patterns
            const contentToCheck = title + ' ' + body;
            
            for (const [label, patterns] of Object.entries(labelMap)) {
              for (const pattern of patterns) {
                if (contentToCheck.includes(pattern)) {
                  labelsToAdd.push(label);
                  break; // No need to check other patterns for this label
                }
              }
            }
            
            // Add priority labels based on specific keywords
            if (contentToCheck.includes('critical') || contentToCheck.includes('kritický') || 
                contentToCheck.includes('urgent') || contentToCheck.includes('urgentní') || 
                contentToCheck.includes('high priority') || contentToCheck.includes('vysoká priorita')) {
              labelsToAdd.push('priority: high');
            } else if (contentToCheck.includes('medium priority') || contentToCheck.includes('střední priorita')) {
              labelsToAdd.push('priority: medium');
            } else if (contentToCheck.includes('low priority') || contentToCheck.includes('nízká priorita')) {
              labelsToAdd.push('priority: low');
            }
            
            // Add the labels if there are any
            if (labelsToAdd.length > 0) {
              const uniqueLabels = [...new Set(labelsToAdd)]; // Remove duplicates
              
              if (isIssue) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: item.number,
                  labels: uniqueLabels
                });
              } else { // PR
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: item.number,
                  labels: uniqueLabels
                });
              }
              
              console.log(`Added labels: ${uniqueLabels.join(', ')} to ${isIssue ? 'issue' : 'PR'} #${item.number}`);
            }

